---
# SIGN USER PUBLIC KEYS
#======= priv keys check start =======
- name: "[UserCerts] Locally check if users' private keys already exist"
  stat: path="{{ item.keypath }}"
  register: sshd_user_k
  loop: "{{ sshd_users }}"
  delegate_to: localhost
  run_once: yes
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Combine the results into following structure: [{priv_key:value,priv_exists:bool}]"
  set_fact:
    sshd_user_keys: "{{ sshd_user_keys|default([]) + [{'priv_key': item.item.keypath, 'priv_exists': item.stat.exists}] }}"
  with_items: "{{ sshd_user_k.results }}"
  run_once: yes
  no_log: yes
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Cleanup: locally remove all .pub keys which do not have private part"
  file: path="{{ item.priv_key }}.pub" state=absent
  delegate_to: localhost
  run_once: yes
  with_items: "{{ sshd_user_keys }}"
  when: not item.priv_exists
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Locally generate user key pairs if any private keys do not exist"
  shell: ssh-keygen -o -a 100 -t {{ sshd_algo }} -q -N "" -f {{ item[1].keypath }} && \
         chown {{ item[1].username }} {{ item[1].keypath }}
  delegate_to: localhost
  run_once: yes
  become: yes
  with_together: ["{{ sshd_user_keys }}", "{{ sshd_users }}"]
  when: not item[0].priv_exists  # Create specific key pair only if private key doesn't exist
  tags:
    - sshd
    - sshd_certs
#======= priv keys check end =======

#====== pub keys check start =======
# IF it is necessary to dynamically create a variable containing specific data:
# https://stackoverflow.com/questions/29399581/using-set-facts-and-with-items-together-in-ansible#29817564
- name: "[UserCerts] Create public key list setp 1: setting facts"
  set_fact:
    sshd_usr_k_item: "{{ item.keypath }}.pub"
  register: sshd_usr_k_result
  run_once: yes
  with_items: "{{ sshd_users }}"
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Create public key list setp 2: mapping facts to variable list"
  set_fact:
    sshd_user_k_pub:
      "{{ sshd_usr_k_result.results|map(attribute='ansible_facts.sshd_usr_k_item')|list }}"
  run_once: yes
  tags:
    - sshd
    - sshd_certs
# This two actions are necessary because if the item does not exist, then results doesnt contain the 'path' key

- name: "[UserCerts] Locally check if user pub keys already exist"
  stat: path="{{ item }}"
  register: sshd_user_k_pub_exist
  with_items: "{{ sshd_user_k_pub }}"
  delegate_to: localhost
  run_once: yes
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Add pub key names and existence status: STEP 1, register results"
  set_fact:
    sshd_user_k_pub_tmp:
      "{{ [ item[0]|combine({'pub_key': item[1], 'pub_exists': item[2].stat.exists}) ] }}"
  with_together:
    - "{{ sshd_user_keys }}"
    - "{{ sshd_user_k_pub }}"
    - "{{ sshd_user_k_pub_exist.results }}"
  register: sshd_user_k_pub
  run_once: yes
  no_log: yes
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Add pub key names and existence status: STEP 2, modifying var"
  set_fact:
    sshd_user_keys: "{{ sshd_user_k_pub.results|map(attribute='ansible_facts.sshd_user_k_pub_tmp')|sum(start=[]) }}"
  run_once: yes
  tags:
    - sshd
    - sshd_certs

# Usually broken pub keys are left after typing wrong passphrase during retrieve from private key process
- name: "[UserCerts] Locally detect broken public keys' by checking fingerprints"
  shell: ssh-keygen -l -f {{ item.pub_key }} -E SHA512 | cut -d ' ' -f 2
  register: sshd_user_k_pub_fprs
  delegate_to: localhost
  run_once: yes
  changed_when: false
  with_items: "{{ sshd_user_keys }}"
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Locally retrieve public key form private if pub key file doesn't exist"
  shell: "ssh-keygen -y -f {{ item[0].priv_key }} > {{ item[0].pub_key }} && \
          chown {{ item[2].username }} {{ item[0].pub_key }}"
  become: yes
  with_together: ["{{ sshd_user_keys }}", "{{ sshd_user_k_pub_fprs.results }}", "{{ sshd_users }}"]
  delegate_to: localhost
  run_once: yes
  when: not item[0].pub_exists or item[1].stdout == ''
  tags:
    - sshd
    - sshd_certs

# At this point all pub keys will exist so we can register fprs and compare with existing certs
- name: "[UserCerts] Locally check the public keys' fingerprints"
  shell: ssh-keygen -l -f {{ item.pub_key }} -E SHA512 | cut -d ' ' -f 2
  register: sshd_user_k_pub_fprs
  delegate_to: localhost
  run_once: yes
  changed_when: false
  with_items: "{{ sshd_user_keys }}"
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Add pub keys' fingerprints: STEP 1, register results"
  set_fact:
    sshd_user_k_pub_tmp:
      "{{ [ item[0]|combine({'pub_fpr': item[1].stdout}) ] }}"
  with_together:
    - "{{ sshd_user_keys }}"
    - "{{ sshd_user_k_pub_fprs.results }}"
  register: sshd_user_k_pub
  run_once: yes
  no_log: yes
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Add pub keys' fingerprints: STEP 2, modifying var"
  set_fact:
    sshd_user_keys: "{{ sshd_user_k_pub.results|map(attribute='ansible_facts.sshd_user_k_pub_tmp')|sum(start=[]) }}"
  run_once: yes
  tags:
    - sshd
    - sshd_certs
#====== pub keys check start =======

#===== certificate check start =====
- name: "[UserCerts] Create list of certificates setp 1: setting facts"
  set_fact:
    sshd_user_c_item: "{{ item.keypath }}-cert.pub"
  register: sshd_user_c_result
  run_once: yes
  with_items: "{{ sshd_users }}"
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Create list list of certificates setp 2: mapping facts to variable list"
  set_fact:
    sshd_user_certs: "{{ sshd_user_c_result.results|map(attribute='ansible_facts.sshd_user_c_item')|list }}"
  run_once: yes
  tags:
    - sshd
    - sshd_certs
# This two actions are necessary because if the item does not exist, then results doesnt contain the 'path' key

- name: "[UserCerts] Locally check if user certificates already exist"
  stat: path="{{ item }}"
  register: sshd_user_c_exist
  with_items: "{{ sshd_user_certs }}"
  delegate_to: localhost
  run_once: yes
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Locally check the user certificates' fingerprints"
  shell:  ssh-keygen -L -E SHA512 -f {{ item }} | \
          fgrep "Public key" | sed 's/^[ \t]*//' | cut -d ' ' -f 4
  become: yes
  delegate_to: localhost
  run_once: yes
  register: sshd_user_c_fprs
  changed_when: false
  with_items: "{{ sshd_user_certs }}"
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Locally check the Signing CA fingerprint on user certs"
  shell:  ssh-keygen -L -E SHA512 -f {{ item }} | \
          fgrep "Signing CA" | sed 's/^[ \t]*//' | cut -d ' ' -f 4
  become: yes
  delegate_to: localhost
  run_once: yes
  register: sshd_user_c_ca_fprs
  changed_when: false
  with_items: "{{ sshd_user_certs }}"
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Add cert_ca_fpr key with certificate fingerprints for existing certs into dictionaries: STEP 1, setting facts"
  set_fact:
    sshd_user_c_tmp: "{{[item[0]|combine({'cert': item[1], 'cert_exists': item[2].stat.exists,
                      'cert_fpr': item[3].stdout, 'cert_ca_fpr': item[4].stdout})]}}"
  with_together:
    - "{{ sshd_user_keys }}"
    - "{{ sshd_user_certs }}"
    - "{{ sshd_user_c_exist.results }}"
    - "{{ sshd_user_c_fprs.results }}"
    - "{{ sshd_user_c_ca_fprs.results }}"
  register: sshd_user_c
  run_once: yes
  no_log: yes
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Add cert_ca_fpr key with certificate fingerprints for existing certs into dictionaries: STEP 2, modifying var"
  set_fact:
    sshd_user_keys: "{{ sshd_user_c.results|map(attribute='ansible_facts.sshd_user_c_tmp')|sum(start=[]) }}"
  run_once: yes
  tags:
    - sshd
    - sshd_certs

# This check is for cases when cert file exists but broken or issued for different public key
- name: "[UserCerts] Cleanup: locally Remove certificate file if it's fingerprint doesn't match the public key's one"
  file: path="{{ item.cert }}" state=absent
  register: sshd_user_certs_removed  # register the cert file deletion fact
  with_items: "{{ sshd_user_keys }}"
  delegate_to: localhost
  run_once: yes
  become: yes
  when: not item.priv_exists or
        item.cert_ca_fpr != sshd_user_ca_fpr.stdout or
        item.cert_fpr != item.pub_fpr
  tags:
    - sshd
    - sshd_certs

- name: "[UserCerts] Locally generate user certificates by signing the specified user public keys with User CA"
  shell:  ssh-keygen -s {{ sshd_user_ca_key }} -n {{ item[0].username }} -V +52w \
          -I {{ sshd_cert_id }}-{{ item[0].username }} {{ item[1].pub_key }} && \
          chown {{ item[0].username }} {{ item[1].cert }}
  delegate_to: localhost
  run_once: yes
  become: yes
  with_together: ["{{ sshd_users }}", "{{ sshd_user_keys }}", "{{ sshd_user_certs_removed.results }}"]
  when: item[2].changed or not item[1].cert_exists
  tags:
    - sshd
    - sshd_certs
